*fcitx5.txt* A Fcitx5 client in Nvim
*fcitx5.nvim* *fcitx5* *Fcitx5*



Author: Tony Fettes <tonyfettes@tonyfettes.com>

==============================================================================
CONTENTS						*fcitx5-contents*

  Introduction						|fcitx5-introduction|
    Requirements					|fcitx5-requirements|
    Features						|fcitx5-features|
    Limitations						|fcitx5-limitations|
    Quickstart						|fcitx5-quickstart|
  Functions						|fcitx5-functions|
  Highlights						|fcitx5-highlights|


==============================================================================
INTRODUCTION						*fcitx5-introduction*

This is a Fcitx5 client in Neovim. It utilize DBus to communicate with Fcitx5.

------------------------------------------------------------------------------
REQUIREMENTS						*fcitx5-requirements*

- This plugin is written on, and tested only on Neovim v0.6.0.
- You need to have luarocks dbus_proxy and lgi installed. This can be done
  with |packer.nvim|; or you may have to play with |'runtimepath'|.
- You need to have working installation of both DBus and Fcitx5 on your
  operating system.
- You need to make sure your UI does NOT have input method support itself,
  otherwsie it will intercept your keystrokes and forwarded them to Fcitx5
  before Neovim and fcitx5.nvim can see them.

-----------------------------------------------------------------------------
FEATURES						*fcitx5-features*

- Toggle, enumeration between input methods and input method groups
- Will not modify current buffer until a commit is made.
- Highlight of preedit and candidates.
- Will not trigger input method in normal mode

-----------------------------------------------------------------------------
LIMITATIONS						*fcitx5-limitations*

- Current the startup time of fcitx5.nvim is slow (~50ms on my machine). You
  could postpone the load of fcitx5.nvim or set it to be trigger by some
  events/keys/commands.
- fcitx5.nvim can not act naturally when around the right edge of window,
  i.e. it can neither scroll the screen horizontally when |'wrap'| is not set,
  nor move the preedit to the next line when |'wrap'| is set.
- Since fcitx5.nvim monitors keystrokes in |Insert-mode| and forward them to
  Fcitx5 using DBus, every keystroke will have additional latency (~1ms).

-----------------------------------------------------------------------------
QUICKSTART						*fcitx5-quickstart*

If you have `packer.nvim` installed, you could use following code to load
fcitx5.nvim:
>
  use {
    'tonyfettes/fcitx5.nvim',
    config = {
      -- Load fcitx5.nvim
      require'fcitx5'.setup {}
      -- Map <M-Tab> to toggle between most recent two input methods.
      vim.cmd[[inoremap <M-Tab> <Cmd>lua require'fcitx5'.toggle()<CR>]]
    },
    -- Add luarocks dependencies
    rocks = { 'lgi', 'dbus_proxy' }
  }
<

==============================================================================
FUNCTIONS						*fcitx5-functions*

fcitx5.nvim provides following Lua functions

setup({config_in})					*fcitx5.setup()*
	Configures fcitx5.nvim.

	Parameters: ~
		{config_in}	Configuration
				- ui: table: UI Specification
				  - separator: string. Separator between
				    candidate words
				  - padding: table: Padding of candidate word
				    - left: integer greater than 0. Left
				      Padding
				    - right: integer greater than 0. Right
				      Padding

toggle()						*fcitx5.toggle()*

	Toggles between the most recent two input methods

enum_im({forward})					*fcitx5.enum_im()*
	Enumerates input methods.

	Parameters: ~
		{forward}	A boolean. Set true to enumerate forwards,
				false to backwards.

enum_im({forward})					*fcitx5.enum_im()*
	Enumerates input method groups.

	Parameters: ~
		{forward}	A boolean. Set true to enumerate forwards,
				false to backwards.

attach()						*fcitx5.attach()*
	Attach to current buffer.

        Note: Calling this function will listen on |InsertCharPre| on current
        buffer

	See Also: ~
		  |fcitx5.detach()|

detach()						*fcitx5.detach()*
	Detach from current buffer.

	See Also: ~
		  |fcitx5.attach()|

destroy()						*fcitx5.destroy()*
	Destroy current input context from Fcitx5 and reset all provided
	function to empty.

==============================================================================
HIGHLIGHTS						*fcitx5-highlights*

Fcitx5CandidateNormal					*hl-Fcitx5CandidateNormal*
	candidates that are not selected

Fcitx5CandidateSelected					*hl-Fcitx5CandidateSelected*
	candidates that are selected

Fcitx5PreeditNormal					*hl-Fcitx5PreeditNormal*
	normal preedit text 

Fcitx5PreeditUnderline					*hl-Fcitx5PreeditUnderline*
	underlined preedit text 

Fcitx5PreeditDontCommit					*hl-Fcitx5PreeditDontCommit*
	preedit text that will not commit

Fcitx5PreeditBold					*hl-Fcitx5PreeditBold*
	bold preedit text 

Fcitx5PreeditStrike					*hl-Fcitx5PreeditStrike*
	preedit text with strikethrough

Fcitx5PreeditItalic					*hl-Fcitx5PreeditItalic*
	italic preedit text

vim:tw=78:ts=8:ft=help:norl:
